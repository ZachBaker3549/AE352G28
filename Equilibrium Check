from sympy import lambdify, sqrt

def evaluate_system_at_equilibrium(f, m, k):
    # Define equilibrium conditions
    p_xe, p_ye, p_ze = 0, 0, 0
    psi_e, theta_e, phi_e = 0, 0, 0
    v_xe, v_ye, v_ze = 0, 0, 0
    w_xe, w_ye, w_ze = 0, 0, 0

    # Compute equilibrium rotor speeds
    w1e = sqrt((9.81 * m) / (4 * k))
    w2e = w1e
    w3e = w1e
    w4e = w1e

    # Convert symbolic function to a numerical function
    f_num = lambdify([p_x, p_y, p_z, psi, theta, phi, v_x, v_y, v_z, w_x, w_y, w_z, w1, w2, w3, w4], f)

    # Evaluate the numerical function at equilibrium conditions
    check = f_num(p_xe, p_ye, p_ze, psi_e, theta_e, phi_e, v_xe, v_ye, v_ze, w_xe, w_ye, w_ze, w1e, w2e, w3e, w4e)
    print('check =', check)

# Example usage
m = 1     # Mass (kg)
k = 1.5   # Thrust coefficient (N / rad²/s²)

# Call the function to evaluate the system at equilibrium
evaluate_system_at_equilibrium(f, m, k)
